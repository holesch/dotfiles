set nocompatible " use Vim settings

" --- Vim configuration ---
set tabstop=4 " Set tab width to 4 spaces
set shiftwidth=4 " When indenting with '>', use 4 spaces width
set softtabstop=4 " Delete 4 spaces with backspace
set expandtab " On pressing tab, insert 4 spaces
set ignorecase " Ignore case when searching
set smartcase " Don't ignore case if there is an uppercase letter
set relativenumber " Display relative line numbers
set number " Display absolute line number on current line
set showcmd " Display command while typing
set lazyredraw " The screen will not be redrawn while executing macros
set visualbell " Use visual bell instead of beeping
set colorcolumn=50,72,80 " Highlight screen columns
set wildmode=longest:full,full " Complete commands till longest common string
set viminfo='1000,<500,s100,h,% " Set what to restore upon startup
set hlsearch " Highlight search matches
set clipboard=unnamed " Use system clipboard
set path+=** " Always search recursively
set listchars=tab:▸\ ,eol:¬ " Set whitespace characters
set list " Show whitespace
set linebreak " Wrap only at whitespace characters
set spelllang=en_us " Set spell check region to American English

if has("cscope")
    set cscopequickfix=s-,c-,d-,i-,t-,e-,a- " Use quickfix window with cscope
    set cscopetag " Use cscope with :tag and CTRL-]
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
        " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    set cscopeverbose " Print message when adding a database

    nnoremap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nnoremap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nnoremap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nnoremap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nnoremap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nnoremap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nnoremap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nnoremap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>
    nnoremap <C-_>a :cs find a <C-R>=expand("<cword>")<CR><CR>
endif

" --- GUI configuration ---
set guifont=Menlo\ Regular:h12 " Set font
set guioptions= " Hide scroll bar, menu, tabs, etc.

" --- Functions ---
function! Preserve(command)
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Execute the command
    execute a:command
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" --- Key mappings ---
" Strip trailing whitespace
nnoremap <leader>$ :call Preserve("%s/\\s\\+$//e")<CR>

" Reindent file
nnoremap <leader>= :call Preserve("normal gg=G")<CR>

" Move between wrapped lines
noremap <C-j> gj
noremap <C-k> gk

" Expand %% to directory of current file
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>

" Open vimrc in a new tab
nnoremap <leader>v :tabedit $MYVIMRC<CR>

" Select the text that was last edited/pasted
nnoremap gV `[v`]

" Toggle the undo graph
nnoremap <F5> :GundoToggle<CR>

" --- Auto commands ---
if has("autocmd")
    augroup user
        autocmd!
        " Source the vimrc file after saving it
        autocmd BufWritePost vimrc source $MYVIMRC
    augroup END
endif

" --- Plugin configuration ---
set background=dark
colorscheme hybrid

