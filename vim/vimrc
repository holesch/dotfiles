set nocompatible " use Vim settings

" === General Vim configuration ===
set tabstop=4 " Set tab width to 4 spaces
set shiftwidth=0 " When indenting with '>', use the tabstop value as width
set expandtab " On pressing tab, insert 4 spaces
set shiftround " Indent to a multiple of 4 spaces
set ignorecase " Ignore case when searching
set smartcase " Don't ignore case if there is an uppercase letter
set number " Display absolute line number
set showcmd " Display command while typing
set lazyredraw " The screen will not be redrawn while executing macros
set colorcolumn=80 " Highlight screen columns
set wildmode=longest:full,full " Complete commands till longest common string
set viminfo='1000,<500,s100,h,% " Set what to restore upon startup
set history=10000 " Set size of command and search history
set path+=** " Always search recursively
set listchars=tab:▸\ ,trail:·,nbsp:⌴ " Set whitespace characters
set list " Show whitespace
set linebreak " Wrap only at whitespace characters
set spelllang=en_us " Set spell check region to American English
set completeopt-=preview " Hide the preview window
set autowrite " Save the file when jumping away
set guifont=Menlo\ Regular:h12 " Set font
set guioptions= " Hide scroll bar, menu, tabs, etc.
set splitright " Open new vertical splits to the right
set splitbelow " Open new horizontal splits below
set scrolloff=5 " Keep 5 lines above and below the cursor
set spell " Enable spell checking
set cursorline " Highlight current line
set formatoptions+=tcqln formatoptions-=o " Set how to format text
set formatlistpat=^\\s*\\d\\+\\.\\s\\+\\\|^[-*+]\\s\\+ " Define list format
set nojoinspaces " Don't insert two spaces after punctuation
set virtualedit+=block " Allow moving through empty space in visual block mode

set statusline=
set statusline+=%1*\ %-2.n\ %*\  " Buffer number
set statusline+=%<%.99f\  " File name
set statusline+=%h%w%m%r\  " [help][Preview][+][RO]
set statusline+=%= " Switch to right side
set statusline+=%-14.{gutentags#statusline('[',']')}
set statusline+=%-14.y " File type
set statusline+=%-14.(%l:%c%V%) " Line:Column
set statusline+=%2*%{WrongEOL()}%*\  " Show EOL if not Unix
set statusline+=%1*\ %P\ %* " Percentage through file

if has('eval')
    function! g:WrongEOL() abort
        return &fileformat !=# "unix" ? " ".&fileformat." " : ""
    endfunction
endif

if has('clipboard')
    " Prepend options to clipboard, as the exclude pattern must be the last
    " entry (see clipboard-exclude)
    set clipboard^=unnamed " Use system clipboard
    if has('unnamedplus')
        " Use CLIPBOARD selection in addition to PRIMARY selection on X11
        set clipboard^=unnamedplus
    endif
endif

if has('mouse')
    set mouse=n " Enable mouse in normal mode
endif

if has('persistent_undo')
    set undodir=~/.cache/vim/undodir " Save undofiles to a central directory
    silent call system('mkdir -p ' . &undodir)
    set undofile " Keep undo history across sessions
endif

if has('patch-8.1.0360')
    set diffopt+=indent-heuristic,algorithm:patience " Produce better diffs
endif

if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor " Use ag over grep
endif

if has("cscope")
    set cscopetag " Use cscope with :tag and CTRL-]
    set cscopequickfix=s-,c-,d-,i-,t-,e- " Use quickfix window with cscope
    nnoremap <leader>cs :cscope find s <C-R>=expand("<cword>")<CR><CR>
    nnoremap <leader>cg :cscope find g <C-R>=expand("<cword>")<CR><CR>
    nnoremap <leader>cc :cscope find c <C-R>=expand("<cword>")<CR><CR>
    nnoremap <leader>ct :cscope find t <C-R>=expand("<cword>")<CR><CR>
    nnoremap <leader>ce :cscope find e <C-R>=expand("<cword>")<CR><CR>
    nnoremap <leader>cf :cscope find f <C-R>=expand("<cfile>")<CR><CR>
    nnoremap <leader>ci :cscope find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nnoremap <leader>cd :cscope find d <C-R>=expand("<cword>")<CR><CR>
    nnoremap <leader>c? :help cscope-find<CR>

    if has('patch-7.4.2033')
        set cscopequickfix+=a-
        nnoremap <leader>ca :cscope find a <C-R>=expand("<cword>")<CR><CR>
    endif
endif

" Fix typos
cnoreabbrev Q q
cnoreabbrev Qa qa
cnoreabbrev Wq wq
cnoreabbrev W w

" Open vimrc in a new tab
nnoremap <silent> <leader>v :tabedit $MYVIMRC<CR>

" Strip trailing whitespace
nnoremap <silent> <leader>$ :call maputils#preserve('%s/\s\+$//e')<CR>

" Reindent file
nnoremap <silent> <leader>= :call maputils#preserve('normal gg=G')<CR>

" Search and replace
nnoremap <leader>r :%s/\<<C-r><C-w>\>//gc<Left><Left><Left>
xnoremap <leader>r "vy:%s/\V<C-r>=escape('<C-r>v', '/\')<CR>//gc<Left><Left><Left>

" Make Y more logical, but break Vi-compatibility: Copy to end of line
nnoremap Y y$

" Replace Ex mode mapping with open quickfix list
nnoremap <silent> Q :copen<CR>

" Toggle between Tabs and Spaces for indentation, use count to set width
nnoremap <silent> g<Tab> :<C-U>call tabset#set(v:count)<CR>

" Open / Close folds recursively
nnoremap <Space> zA

" Jump to buffer
nnoremap <Leader>j :<C-U>buffers<CR>:buffer<Space>

" Auto close brackets
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O

" Fugitive
nnoremap <silent> <leader>gs :15Gstatus<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gd :Gvdiff<CR>
nnoremap <silent> <leader>ge :Gedit<CR>
nnoremap <silent> <leader>gp :Gpush<CR>

" Subversive
nmap cr <plug>(SubversiveSubstituteRange)
xmap <C-R> <plug>(SubversiveSubstituteRange)
nmap c. <plug>(SubversiveSubstituteWordRange)

" Show syntax highlighting group under cursor
nnoremap <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Double click to go to tag, right click to go back
nnoremap <2-LeftMouse> <C-]>
nnoremap <RightMouse> <C-T>

" === Text objects ===
" last edited/pasted text
nnoremap gV `[vg`]
xnoremap gV `[og`]
onoremap <silent> gV :<C-U>normal! `]vg`[<CR>
" last selection
onoremap <silent> gv :<C-U>normal! gv<CR>
" inner line and a line
xnoremap <silent> il :<C-U>normal! g_v^<CR>
onoremap <silent> il :<C-U>normal! g_v^<CR>
xnoremap <silent> al :<C-U>normal! $v0<CR>
onoremap <silent> al :<C-U>normal! $v0<CR>
" a document
xnoremap <silent> ad :<C-U>normal! gg0VG$<CR>
onoremap <silent> ad :<C-U>normal! GVgg<CR>
" a view
xnoremap <silent> av :<C-U>normal! H0VL$<CR>
onoremap <silent> av :<C-U>normal! LVH<CR>
" inner function and a function
xmap af <Plug>TextobjCFunctionA
omap af <Plug>TextobjCFunctionA
xmap if <Plug>TextobjCFunctionI
omap if <Plug>TextobjCFunctionI

if has('autocmd')
    augroup vimrc
        autocmd!
        " Source the vimrc file after saving it
        autocmd BufWritePost vimrc nested source $MYVIMRC
        " Jump to last known cursor position, when opening a file
        autocmd BufReadPost * call <SID>restore_position()
    augroup END

    function! s:restore_position() abort
        let last_pos = line("'\"")
        if last_pos >= 1 && last_pos <= line("$") && &ft !~# 'commit'
            execute "normal! g`\""
        endif
    endfunction
endif

if has('syntax') && !exists('g:syntax_on')
    let g:colors_name = "base16-monokai-custom"
    syntax enable
endif
