set autoindent " Keep indentation when starting a new line
set backspace=indent,eol,start " Never disable backspace in insert mode
set complete-=i " Don't scan included files for completion (too slow)
set nrformats-=octal " Parse numbers starting with zero as decimal
set incsearch " Highlight search while typing
set tabstop=4 " Set tab width to 4 spaces
set shiftwidth=0 " When indenting with '>', use the tabstop value as width
set expandtab " On pressing tab, insert 4 spaces
set smarttab " Delete 4 spaces with backspace
set shiftround " Indent to a multiple of 4 spaces
set ignorecase " Ignore case when searching
set smartcase " Don't ignore case if there is an uppercase letter
set number " Display absolute line number
set showcmd " Display command while typing
set lazyredraw " The screen will not be redrawn while executing macros
set colorcolumn=80 " Highlight screen columns
set wildmenu " Show matches when using command line completion
set wildmode=longest:full,full " Complete commands till longest common string
set viminfo='1000,<500,s100,h,% " Set what to restore upon startup
set history=10000 " Set size of command and search history
set path+=** " Always search recursively
set listchars=tab:▸\ ,trail:·,nbsp:⌴ " Set whitespace characters
set list " Show whitespace
set linebreak " Wrap only at whitespace characters
set spelllang=en_us " Set spell check region to American English
set completeopt-=preview " Hide the preview window
set autoread " Reload file when changed outside of Vim
set autowrite " Save the file when jumping away
set guifont=Menlo\ Regular:h12 " Set font
set guioptions= " Hide scroll bar, menu, tabs, etc.
set splitright " Open new vertical splits to the right
set splitbelow " Open new horizontal splits below
set scrolloff=5 " Keep 5 lines above and below the cursor
set sidescrolloff=5 " Keep 5 columns around the cursor
set spell " Enable spell checking
set cursorline " Highlight current line
set formatoptions-=o " Don't continue comment with 'o' or 'O'
set formatoptions+=l " Don't break lines which are already too long
set formatoptions+=j " Correctly reformat comments
set formatoptions+=n " Recognize lists when formatting text
set formatlistpat=\\v^\\s*%(%(\\d+\|\\a)[.)]\|[-*+])\\s+ " Define list format
set nojoinspaces " Don't insert two spaces after punctuation
set virtualedit+=block " Allow moving through empty space in visual block mode
set paragraphs= " Don't use nroff macros as paragraph boundaries
set sections= " Don't use nroff macros as section boundaries
set showbreak=›\  " Show soft breaks
set notimeout " Disable one second timeout for key mappings
set ttimeout " Enable keyboard code timeout
set ttimeoutlen=30 " Set keyboard code timeout in ms
set laststatus=2 " Always show status line
set display=lastline " Show as much as possible of the last line
set display+=uhex " Show hexadecimal value of unprintable characters (<xx>)
set sessionoptions-=options " Don't save options and mappings with :mksession
set viewoptions-=options " Don't save options and mappings with :mkview
set confirm " Raise dialog when there are unsaved changes (e.g. with ":q")
set foldlevel=99 " Open all folds by default
set cpoptions-=C " Allow line concatenation with backslash
set foldmethod=marker
set nostartofline " Keep the same column when jumping around

set statusline=
set statusline+=%1*\ %-2.n\ %*\  " Buffer number
set statusline+=%<%.99f\  " File name
set statusline+=%h%w%m%r\  " [help][Preview][+][RO]
set statusline+=%= " Switch to right side
set statusline+=%-14.y " File type
set statusline+=%-14.(%l:%c%V%) " Line:Column
set statusline+=%2*%{WrongEOL()}%*\  " Show EOL if not Unix
set statusline+=%1*\ %P\ %* " Percentage through file

if has('eval')
    function! g:WrongEOL() abort
        return &fileformat !=# "unix" ? " ".&fileformat." " : ""
    endfunction
endif

if has('mouse')
    set mouse=n " Enable mouse in normal mode
    if &term ==# "screen-256color" " used by tmux
        set ttymouse=sgr " The default ("xterm") only works up to 223 columns
    endif
endif

if has('persistent_undo')
    set undodir=~/.cache/vim/undodir " Save undofiles to a central directory
    set undofile " Keep undo history across sessions
endif

if has('patch-8.1.0360')
    set diffopt+=indent-heuristic,algorithm:patience " Produce better diffs
endif

if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor " Use ag over grep
endif

if has("cscope")
    set cscopequickfix=s-,c-,d-,i-,t-,e- " Use quickfix window with cscope
    nnoremap <leader>cs :cscope find s <C-R>=expand("<cword>")<CR><CR>
    nnoremap <leader>cg :cscope find g <C-R>=expand("<cword>")<CR><CR>
    nnoremap <leader>cc :cscope find c <C-R>=expand("<cword>")<CR><CR>
    nnoremap <leader>ct :cscope find t <C-R>=expand("<cword>")<CR><CR>
    nnoremap <leader>ce :cscope find e <C-R>=expand("<cword>")<CR><CR>
    nnoremap <leader>cf :cscope find f <C-R>=expand("<cfile>")<CR><CR>
    nnoremap <leader>ci :cscope find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nnoremap <leader>cd :cscope find d <C-R>=expand("<cword>")<CR><CR>
    nnoremap <leader>c? :help cscope-find<CR>

    if has('patch-7.4.2033')
        set cscopequickfix+=a-
        nnoremap <leader>ca :cscope find a <C-R>=expand("<cword>")<CR><CR>
    endif
    cscope add cscope.out
endif

if has('eval')
    " Set v:shell_error to the exit status of makeprg, instead of the exit
    " status of tee
    let &shellpipe = get({
        \ 'zsh': "|& tee %s && exit ${pipestatus[1]}",
        \ 'bash': "2>&1 | tee %s && exit ${PIPESTATUS[0]}",
    \ }, fnamemodify(&shell, ":t"), &shellpipe)
endif

" Fix typos
cnoreabbrev Q q
cnoreabbrev Qa qa
cnoreabbrev Wq wq
cnoreabbrev W w

" Open vimrc in a new tab
nnoremap <silent> <leader>v :tabedit $MYVIMRC<CR>

" Strip trailing whitespace
nnoremap <silent> <leader>$ :call maputils#preserve('%s/\s\+$//e')<CR>

" Make Y more logical, but break Vi-compatibility: Copy to end of line
nnoremap Y y$

" Break undo sequence, i.e. start a new change before deleting the whole line
inoremap <C-U> <C-G>u<C-U>

if has('user_commands')
    " Make without prompts
    nnoremap m<CR> :Make<CR>
    nnoremap m<Space> :Make<Space>
    nnoremap m? :set makeprg?<CR>
    command! -nargs=* -bang -bar Make
            \ execute "silent make" . <q-bang> <q-args> <bar> redraw!

    " Grep without prompts
    nnoremap <expr> + maputils#grep_literal(expand("<cword>"))
    xnoremap <expr> + maputils#grep_literal(maputils#get_selection())
    command! -nargs=* -bang Grep
            \ execute "silent grep" . <q-bang> <q-args> <bar> redraw!
endif

" Replace Ex mode mapping with open quickfix list
nnoremap <silent> Q :botright copen<CR>

" Don't show :help if I miss the ESC key
nnoremap <F1> <nop>
inoremap <F1> <nop>

" Toggle between Tabs and Spaces for indentation, use count to set width
nnoremap <silent> g<Tab> :<C-U>call tabset#set(v:count)<CR>

" Open / Close folds recursively
nnoremap <Space> zA

" Jump to buffer
nnoremap <leader>j :<C-U>buffers<CR>:buffer<Space>

" Auto close brackets
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O

" Tab completion
inoremap <expr> <Tab> maputils#tab()
inoremap <expr> <S-Tab> maputils#shift_tab()

" Redraw
nnoremap <silent> <leader>l :redraw!<CR>

" Reconnect to X server, e.g. after reconnecting with SSH into a tmux session
nnoremap <silent> <leader>X :call maputils#tmux_xrestore()<CR>

" Visual @
xnoremap @ :<C-u>call maputils#visual_macro()<CR>

" Delete next multiple whitespace characters
nnoremap <expr> d<Space> maputils#delete_whitespace()

" Fugitive
nnoremap <silent> <leader>gs :Git<CR>
nnoremap <silent> <leader>gb :Git blame<CR>
nnoremap <silent> <leader>gd :Gvdiff<CR>
nnoremap <silent> <leader>ge :Gedit<CR>
nnoremap <silent> <leader>gp :Git push<CR>

" Subversive
nmap cr <Plug>(SubversiveSubstituteRange)
xmap <C-R> <Plug>(SubversiveSubstituteRange)
nmap c. <Plug>(SubversiveSubstituteWordRange)

" Jump to '{' or '}' of a function, even if not in first column
nmap ]] <Plug>(CFunctionNext)
xmap ]] <Plug>(CFunctionNext)
omap ]] <Plug>(CFunctionNext)
nmap [[ <Plug>(CFunctionPrev)
xmap [[ <Plug>(CFunctionPrev)
omap [[ <Plug>(CFunctionPrev)

" Show syntax highlighting group under cursor
nnoremap zS :call maputils#show_highlight_groups()<CR>

" Double click to go to tag, right click to go back
nnoremap <expr> <2-LeftMouse> maputils#double_click()
nnoremap <RightMouse> <C-T>

if has("terminal")
    " Support window switching mappings in :terminal
    tnoremap <silent> <C-H> <C-W>:TmuxNavigateLeft<CR>
    tnoremap <silent> <C-J> <C-W>:TmuxNavigateDown<CR>
    tnoremap <silent> <C-K> <C-W>:TmuxNavigateUp<CR>
    tnoremap <silent> <C-L> <C-W>:TmuxNavigateRight<CR>
endif

" === Text objects ===
" last edited/pasted text
nnoremap gV `[vg`]
xnoremap gV `[og`]
onoremap <silent> gV :<C-U>normal! `]vg`[<CR>
" last selection
onoremap <silent> gv :<C-U>normal! gv<CR>
" inner line and a line
xnoremap <silent> il :<C-U>normal! g_v^<CR>
onoremap <silent> il :<C-U>normal! g_v^<CR>
xnoremap <silent> al :<C-U>normal! $v0<CR>
onoremap <silent> al :<C-U>normal! $v0<CR>
" a document
xnoremap <silent> ad :<C-U>normal! gg0VG$<CR>
onoremap <silent> ad :<C-U>normal! GVgg<CR>
" a view
xnoremap <silent> av :<C-U>normal! H0VL$<CR>
onoremap <silent> av :<C-U>normal! LVH<CR>
" inner function and a function
xmap af <Plug>(CFunctionTextObjA)
omap af <Plug>(CFunctionTextObjA)
xmap if <Plug>(CFunctionTextObjI)
omap if <Plug>(CFunctionTextObjI)

if executable('fzy') && executable('ag')
    " Fuzzy finder
    nnoremap <C-P> :call maputils#fzy("ag . --silent -l -g ''", ":e")<CR>
endif

if has('user_commands')
    command! -bar SudoWrite redraw! | execute 'silent write'
                \ '!SUDO_EDITOR="tee" VISUAL="tee" sudo -e "%" >/dev/null'
                \ | let &modified = v:shell_error
endif

if has('autocmd')
    " Enable file type detection, file type specific plugins and indentation
    filetype plugin indent on

    augroup vimrc
        autocmd!
        " Source the vimrc file after saving it
        autocmd BufWritePost vimrc nested source $MYVIMRC
        " Jump to last known cursor position, when opening a file
        autocmd BufReadPost * call <SID>restore_position()
        " Open quickfix window, if the build failed
        autocmd QuickFixCmdPost make,grep if v:shell_error | botright copen
                    \ | else | botright cwindow | endif
        if isdirectory('.git') || filereadable('.vim-enable-mtags')
            autocmd VimEnter,BufWritePost * silent execute
                    \ "!queue-one -n mtags mtags >.mtags.log 2>&1 &" | redraw!
        endif
    augroup END

    function! s:restore_position() abort
        let last_pos = line("'\"")
        if last_pos >= 1 && last_pos <= line("$") && &ft !~# 'commit'
            execute "normal! g`\""
        endif
    endfunction
endif

if has('syntax') && !exists('g:colors_name')
    let g:colors_name = "base16"
    syntax enable
endif

if has('packages')
    " Enhance % to jump between "if", "else", "endif", etc.
    packadd! matchit
endif
